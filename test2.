#!/usr/bin/env python
from __future__ import print_function
from pprint import pprint

import os
import cStringIO


buf = cStringIO.StringIO()
import boto.ec2
from arghandler import *

##Method for getting the details of instance

def get_all_retirement_instances(parser,context,args,event_code):
    ##Creating EC2 connection
    region = context.region
    '''
    instanceid=context.instanceid
    tag_owner='OWNEREMAIL'
    tag_alert='ALERTGROUP'
    '''
    #print(region)
    conn = boto.ec2.connect_to_region(region,aws_access_key_id=os.environ['AWS_ACCESS_KEY'],aws_secret_access_key=os.environ['AWS_SECRET_KEY'])
    reservations = conn.get_all_instance_status()
    instances = []
    #for reservation in conn.get_all_instance_status():
    for reservation in reservations:
        #if reservation.events:
        if reservation.events:
            for event in reservation.events:
                if event.code == event_code:
                    print(event_code)
                    alert_notify(region,reservation.id)

def alert_notify(region, instanceid):
    tag_owner = 'OWNEREMAIL'
    tag_alert = 'ALERTGROUP'
    conn = boto.ec2.connect_to_region(region, aws_access_key_id=os.environ['AWS_ACCESS_KEY'],aws_secret_access_key=os.environ['AWS_SECRET_KEY'])
    reservations = conn.get_all_instances(instance_ids=[instanceid])
    instance = reservations[0].instances[0]
    #pprint(instance.__dict__)
    if 'NAME' in instance.tags and tag_owner in instance.tags: #and tag_alert in instance.tags:
        ins_name = instance.tags['NAME']
        '''
        ins_alertgroup = instance.tags['ALERTGROUP']
        ins_ownermail = instance.tags['OWNEREMAIL']
        '''
        ins_alertgroup = 'opsgenie_aws'
        ins_ownermail = 'anushakilari1988@gmail.com'
        print(ins_name)
        print(ins_alertgroup)
        print(ins_ownermail)
        create_alert(ins_name, ins_alertgroup, ins_ownermail)

from opsgenie.swagger_client import AlertApi
from opsgenie.swagger_client import configuration
from opsgenie.swagger_client.models import *
from opsgenie.swagger_client.rest import ApiException

def setup_opsgenie_client():
    configuration.api_key['Authorization'] = os.environ['API_KEY']
    configuration.api_key_prefix['Authorization'] = 'GenieKey'


def create_alert(ins_name,ins_alertgroup,ins_ownermail):
    setup_opsgenie_client()
    body = CreateAlertRequest(
        message=ins_name + ' scheduled for retirement!',
        alias=ins_name,
        description='Amazon EC2 Instance' + ins_name + ' scheduled for retirement',
        teams=[TeamRecipient(name=ins_alertgroup)],
        visible_to=[TeamRecipient(name=ins_alertgroup, type='team')],
        #actions=['ping', 'restart'],
        tags=['server', 'operations', 'ec2'],
        entity=ins_name,
        priority='P2',
        user=ins_ownermail,
        note='Alert created')

    try:
        response = AlertApi().create_alert(body=body)

        print('request id: {}'.format(response.request_id))
        print('took: {}'.format(response.took))
        print('result: {}'.format(response.result))
        requestid=response.request_id
        return requestid
    except ApiException as err:
        print("Exception when calling AlertApi->create_alert: %s\n" % err)

'''
#connect to aws region
def connect_to_aws():
    conn = boto.ec2.connect_to_region(region, aws_access_key_id='xxxxx',aws_secret_access_key='IgiWQ/6OPcEEmfx9mrALUKVnyKtwIyFo2hpd5gua')
'''

##Method for getting instance tags
@subcmd('notify')
def get_instance_details(parser,context,args):
    event_codes = ['system-maintenance', 'instance-reboot','instance-retirement','instance-stop']
    for event_code in event_codes:
        print(event_code)
        get_all_retirement_instances(parser,context,args,event_code)
    #print(instancelist)


handler = ArgumentHandler()
handler.add_argument('-r','--region', required=True)
#handler.add_argument('-i','--instanceid', required=True)
handler.run()
